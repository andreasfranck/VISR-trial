/**
  @page build_instructions Build Instructions
 
  @tableofcontents
 
  @section setup_environment_linux Linux Distribution and Build/Runtime Environment
  The recommended Linux distribution for the VISR is <a href=https://ubuntustudio.org/>Ubuntu Studio</a> 14.04 LTS. It can be obtained from the <a href=https://ubuntustudio.org/download/>download site</a>.
 
  @subsection package_installation Installation of Required Software and Libraries
  Additional software packages (applications and libraries) are installed using the <tt>apt</tt> packet management tools (e.g., <a href=https://wiki.debian.org/Apt>https://wiki.debian.org/Apt</a> or <a hfref=http://en.wikipedia.org/wiki/Advanced_Packaging_Tool>http://en.wikipedia.org/wiki/Advanced_Packaging_Tool</a>).
   Search for package using a part of the name or the description: <tt>apt-cache search searchstring</tt>
   Show information about a package  <tt>apt-cache show package</tt>
   Install a software package <tt>sudo apt-get install package</tt>
 
  @subsection linux_required_software_packages Required Software Libraries
  The following software libraries must be installed to build and run the VISR
   libboost-all-dev
   portaudio19-dev
   libsndfile1-dev
 
  NB: If compilation is not required, then the standard packages (without "dev") should be sufficient. However, this has not been tested yet. Moreover, there is no equivalent to boost-all-dev, so the required libraries would need to be specified manually together with their version. At the moment, these package names are <tt>libboost-system1.54.0</tt>, <tt>libboost-thread1.54.0</tt>, <tt>libboost-filesystem1.54.0</tt>.
  
  For development and compilation of the project, the following packages are required:
   git
   cmake
   cmake-gui (recommended)
   g++
   doxygen
   graphviz
   A decent editor or development environment. Choose your weapon: vi, vim, gvim, emacs, eclipse ...
 
  The following tools are recommended for audio development and testing:
   audacity
   qjackctl
   jaaa
   meterbridge
  
  To build the soundscape renderer, the following development libraries need to be installed:
   libfftw3-dev
   libqt4-dev
   libecasoundc-dev
   libjack-jack2-dev (probably)
 
  The SoundScapeRenderer must be downloaded from the <a href=http://spatialaudio.net/ssr/download/>SSR download page</a> and installed accoording to the <a href=http://ssr.rtfd.org/>User manual</a>.
  This possibly requires additional software (automake, gmake).
 
  @section handling_3rdparty_libs Handling of Third-Party Libraries
  In general, it is preferable to use the platforms package installation mechanisms to provide additional software components/libraries  
   
  @subsection boost_on_windows_ Building and Finding Boost on Windows platforms (Visual Studio) 
    Download the Boost source distribution, e.g., boost_1_57_0.zip or boost_1_57_0.tar.bz2
    Unpack the boost distribution
    The top-level directory within the unpacked archive is referred to as <tt>boost_root</tt> in the following
    Open the command prompt for the Visual Studio version you are targeting
    Execute <tt>VC\\vcvarsall amd64</tt> to switch the compiler toolchain to 64-bit mode (if necessary, do cd VC; ..\\vcvarsall.sh amd64)
    Go to the boost_root directory
    Execute the bootstrap build function to build the build tools <tt>.\\bootstrap.bat</tt>
    Build boost: <tt>.\\b2 address-model=64 --build-type=complete stage</tt> (this takes a while and consumes about 10 GB disk space).
    Alternatively, precompiled boost libraries can be used:
      Download the correct version from <a href=http://sourceforge.net/projects/boost/files/boost-binaries/>http://sourceforge.net/projects/boost/files/boost-binaries/</a>.
      Install and rename the directory <tt>lib-msvc-VVVV</tt> to <tt>lib</tt>
    Add the following environment variable to Windows (Control Center->System->Advanced System settings->Environment Variables): <tt>BOOST_ROOT=boost_root</tt>.
    A subsequent configure run in CMake should yield "Boost version: 1.xx.x Found the following Boost libraries: ..." 
    Note: Because Python bindings are created using the header-only pybind11 library, no Python support is needed in Boost.
 
   @subsection windows_external_libraries External Libraries on Windows
 
  The following libraries must be provided externally
 
  @subsubsection FFT
   Due to the GPL licence of the FFTW, this library it is not included in the source tree.
   In order to use this library, activate the 'BUILD_USE_FFTW' option in CMake.
   Download a binary distribution for Windows http://www.fftw.org/install/windows.html
   Create the .lib files (stubs for linking the DLL) according to the instructions on the download page.
   Create an environment variable FFTW_ROOT pointing to the base directory of the binary distribution.
   TODO: Remove all code (and build support) for public releases.
 
 
  @subsection macos MacOS X 
    Setup Xcode and import git project from repository.
    Install cmake (download from <a href="http://www.cmake.org/download/">http://www.cmake.org/download/</a>)
    Install <tt>brew</tt> following the instructions on <a href ="http://brew.sh">http://brew.sh</a> (Paste command line at the bottom of web page to terminal window)
    Initialise brew: <tt>$ brew doctor</tt>
    <b>Note:</b> To support the build of VISR binaries as universal binaries, all installations via brew must be done with the <tt>--universal</tt>.
     - If a package has already been istalled, uninstall it first and then reinstall with the option set.
     - install with <tt>brew install [package options] --universal [package name]</tt> 
     - To avoid building universal binaries, deselect the CMake option <tt>BUILD_MACOS_UNIVERSAL_BINARIES</tt>
    Install doxygen (download from <a href="http://www.stack.nl/~dimitri/doxygen/download.html"> http://www.stack.nl/~dimitri/doxygen/download.html</a>)
    Install boost and portaudio --universal
     - <tt>brew install pkgconfig</tt> (PkgConfig is not strictly required, but reduces the likelihood of problems while searching for other libraries).
     - <tt>brew install boost --universal </tt>
     - <tt>brew install portaudio --universal</tt>
     - <tt>brew install libsndfile --universal</tt>
    When the python bindings are going to be used, install boost as follows (taken from <a href= http://www.pyimagesearch.com/2015/04/27/installing-boost-and-boost-python-on-osx-with-homebrew/> http://www.pyimagesearch.com/2015/04/27/installing-boost-and-boost-python-on-osx-with-homebrew/</a>)
     - If necessary, uninstall a previously installed boost beforehand: <tt>brew uninstall boost</tt>
     - <tt>brew install python --universal</tt>
     - <tt>brew install boost --universal --with-python</tt>
     - <tt>brew install boost-python --universal</tt>
 */