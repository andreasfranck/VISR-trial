# -*- coding: utf-8 -*-
"""
Created on Fri Sep  1 15:22:13 2017

@author: af5u13
"""

# Example script for using an audio meter for static ("offline") evaluation of a sound file.

# %% Module imports

# VISR core modules
import visr   # Core VISR module, defines components and ports
import rrl    # VISR runtime library, for running components.

from audio_meter import LoudnessMeter

import numpy as np
import matplotlib.pyplot as plt
import scipy.io.wavfile as wavio
import os

# Define basic parameters of the simulated run.
blockSize = 1024

# Helper function to scale and convert WAV signals 
def wavToFloat( x ):
    if x.dtype == np.int16:
        return 1.0/float( 2 << 14 ) * np.asarray( x, dtype = np.float32 )
    elif x.dtype == np.int32:
        return 1.0/float( 2 << 30 ) * np.asarray( x, dtype = np.float32 )
    else:
        return np.asarray( x, dtype = np.float32 ) # Don't scale

# Load the audio signal
samplingFrequency, inputSignal = wavio.read( os.path.join( os.getcwd(), 'sqam_66.wav' ))
inputSignal = wavToFloat( inputSignal).T


# Determine signal size and the number of blocks
numBlocks = inputSignal.shape[1] // blockSize # Note: That truncates the signal
signalLength = blockSize * numBlocks

# Check the number of channels.
numberOfChannels = inputSignal.shape[0] 

# Data structure to define basic
context = visr.SignalFlowContext( blockSize, samplingFrequency )

# Instantiate the signal flow (a component)
meter = LoudnessMeter( context, "meter", None, numberOfChannels = numberOfChannels )

# Instantiate an AudioSignalFlow object to execute the component.
flow = rrl.AudioSignalFlow( meter )

# Retrieve the component's external output port.
# This is used to retrieve the metered values generated by the LoudnessMeter.
loudnessOut = flow.parameterSendPort( 'loudnessOut' )

# Define a list to collect the computed loudness values.
loudness = []

# Execute the audio signal flow sequentially by processing the audio block-wise.
for blockIdx in range(0,numBlocks):
    # Extract the next audio block
    inputBlock = inputSignal[:, blockIdx*blockSize:(blockIdx+1)*blockSize]
    # Execute the signal flow (one iteration)
    flow.process( inputBlock )

    # Check wheter the signal flow has generated new loudness data.
    if not loudnessOut.empty():
        # Extract value from the FIFO queue
        Lk = loudnessOut.front()
        # Append the datum
        loudness.append( Lk.value )
        # Remove element from queue
        loudnessOut.pop()

# Visualise the result
plt.figure(1)
plt.plot( loudness, 'b.-' )
plt.show( block = False)
